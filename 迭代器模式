迭代器模式定义

迭代器模式（Iterator），提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。

迭代器模式的角色构成

(1)迭代器角色（Iterator）:定义遍历元素所需要的方法，一般来说会有这么三个方法：取得下一个元素的方法next()，判断是否遍历结束的方法hasNext()），移出当前对象的方法remove(),

(2)具体迭代器角色（Concrete Iterator）：实现迭代器接口中定义的方法，完成集合的迭代。

(3)容器角色(Aggregate):  一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等

(4)具体容器角色（ConcreteAggregate）：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。

迭代器模式应用的场景及意义
(1)访问一个聚合对象的内容而无需暴露它的内部表示

(2)支持对聚合对象的多种遍历

(3)为遍历不同的聚合结构提供一个统一的接口
 
迭代器模式四个角色之间的关系可以用类图表示
 
 
具体代码实现：
定义迭代器角色(Iterator)
1 public interface Iterator {
2 
3     public boolean hasNext();
4     public Object next();
5 }
定义具体迭代器角色(Concrete Iterator)

 1 package patten.design;
 2 
 3 import patten.design.List;;
 4 
 5 public class ConcreteIterator implements Iterator {
 6     private List list = null;
 7     private int index;
 8 
 9     public ConcreteIterator(List list) {
10         super();
11         this.list = list;
12     }
13 
14     @Override
15     public boolean hasNext() {
16         if (index >= list.getSize()) {
17             return false;
18         } else {
19             return true;
20         }
21     }
22 
23     @Override
24     public Object next() {
25         Object object = list.get(index);
26         index++;
27         return object;
28     }
29 
30 }
定义容器角色(Aggregate)

 1 package patten.design;
 2 
 3 //定义集合可以进行的操作
 4 public interface List {
 5 
 6     public void add(Object obj);  
 7     public Object get(int index);
 8     public Iterator iterator();  
 9     public int getSize();
10 }
定义具体容器角色(ConcreteAggregate)

 1 package patten.design;
 2 
 3 public class ConcreteAggregate implements List{
 4 
 5     private Object[] list;
 6     private int size=0;
 7     private int index=0;
 8     public ConcreteAggregate(){
 9         index=0;
10         size=0;
11         list=new Object[100];
12     }
13     @Override
14     public void add(Object obj) {
15         list[index++]=obj;
16         size++;
17     }
18 
19     @Override
20     public Iterator iterator() {
21         
22         return new ConcreteIterator(this);
23     }
24     @Override
25     public Object get(int index) {
26         
27         return list[index];
28     }
29     @Override
30     public int getSize() {
31         
32         return size;
33     }
34 
35 }
代码测试

 1 package patten.design;
 2 
 3 public class IteratorTest {
 4 
 5     /**
 6      * @param args
 7      */
 8     public static void main(String[] args) {
 9 
10         List list=new ConcreteAggregate();
11         list.add("a");
12         list.add("b");
13         list.add("c");
14         list.add("d");
15         Iterator it=list.iterator();
16         while(it.hasNext()){
17             System.out.println(it.next());
18         }
19     }
20 
21 }
迭代器模式的优缺点：

迭代器模式的优点有：
  
    主要是为了可以让迭代和集合对象解耦。新增迭代方式的时候可以不用修改集合对象，只需新增迭代器对象即可，符合开闭原则。
  
迭代器模式的缺点：

    对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合。
    
 总的来说： 迭代器模式是与集合共生共死的，一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等，
 这些集合都有自己的迭代器。假如我们要实现一个这样的新的容器，当然也需要引入迭代器模式，给我们的容器实现一个迭代器。
